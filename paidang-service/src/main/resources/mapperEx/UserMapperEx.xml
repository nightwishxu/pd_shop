<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.item.daoEx.UserMapperEx" >
	<resultMap id="BaseResultMap" type="com.item.daoEx.model.UserEx" extends="com.item.dao.UserMapper.BaseResultMap">

	</resultMap>

	<!-- 机构后台，用户列表 -->
	<select id="selectOrgUsersList" resultMap="BaseResultMap">
		SELECT * FROM b_user
		WHERE
			type = '1'
			<if test="orgId != null and oegId !=''">
				AND   org_id = #{orgId}
			</if>
			<!--<if test="key != null and key !='' ">
				AND (nick_name like #{key} or phone like #{key})
			</if>-->
			<if test="key != null and key !=''">
				and (nick_name like '%${key}%' or phone like '%${key}%')
			</if>
			order by create_time asc
	</select>




	<select id="selectList" resultMap="BaseResultMap" parameterType="com.item.dao.model.User" >
    select
    	u.*
    from b_user u 
    where u.type = 0
    <if test="nickName != null and nickName !=''">
    	 and u.nick_name like '%${nickName}%'
    </if>
		<if test="account != null and account !=''">
			and  u.account like '%${account}%'
		</if>
    order by u.create_time desc
  </select>
  
   	<update id="updateBalance" parameterType="java.util.HashMap">
  		update b_user set balance=balance+#{num} where id = #{id}
  	</update>
  	
  	<select id="selectIdByAccount" resultType="Integer">
  		select id
  			from b_user
  		where account = #{account}
  	</select>
  	<select id="selectIdByAccounts" resultType="Integer">
  		select id
  			from b_user
  		where account in 
  					<foreach collection="accounts" item="item" separator="," open="(" close=")">
  						#{item}
  					</foreach>
  	</select>
  	<select id="selectAccountById" resultType="java.lang.String">
  		select account
  			from b_user
  		where id = #{id}
 
  	</select>
	<select id="selectByAccount" resultMap="BaseResultMap">
		SELECT 	u.*
    from b_user u
    where account = #{account}
	</select>


	<select id="findList" resultType="com.item.daoEx.model.UserEx">
		SELECT a.id,a.nick_name,a.icon
		<if test="userId!=null">
			,t.status as followStatus
		</if>
		from (select u.* from b_user u where u.nick_name like  CONCAT('%',#{keyword},'%') and u.state!=0 ) a
		<if test="userId!=null">
			left join t_user_follow t on a.id=t.follow_id and t.type=1
			and t.user_id=#{userId}
		</if>
		where 1=1
		<if test="userId!=null">
			and a.id!=#{userId}
		</if>
		order by LENGTH(a.nick_name)
	</select>

	<select id="findListBack" resultType="com.item.daoEx.model.UserEx">
		SELECT m.*
		<if test="isHealthCounselor!=null and isHealthCounselor=='1'.toString()">
			,(SELECT count(*) from t_user_counselor where counselor_id=m.id and counselor_type=1) as healthCount
		</if>
		<if test="isInsuranceCounselor!=null and isInsuranceCounselor=='1'.toString()">
			,(SELECT count(*) from t_user_counselor where counselor_id=m.id and counselor_type=2) as insuranceCount
		</if>
		from b_user m where 1=1
		<if test="nickName!=null and nickName!=''">
			and m.nick_name like CONCAT('%',#{nickName},'%')
		</if>
		<if test="username!=null and username!=''">
			and m.username like CONCAT('%',#{username},'%')
		</if>
		<if test="isHealthCounselor!=null and isHealthCounselor=='1'.toString()">
			and m.is_health_counselor = 1
		</if>
		<if test="isInsuranceCounselor!=null and isInsuranceCounselor=='1'.toString()">
			and m.is_insurance_counselor = 1
		</if>
		order by m.create_time desc
	</select>

<!--	<select id="getCounselor" resultType="com.item.daoEx.model.UserEx">-->
<!--		SELECT-->
<!--		id,username,nick_name,icon,real_name realName,is_health_counselor,is_insurance_counselor,status-->
<!--		FROM-->
<!--		b_user-->
<!--		WHERE-->
<!--		b_user.id >= FLOOR(-->
<!--		RAND() * (-->
<!--		( SELECT MAX( U1.id ) FROM b_user AS U1 ) - ( SELECT MIN( U2.id ) FROM b_user AS U2 )-->
<!--		) + ( SELECT MIN( U3.id ) FROM b_user AS U3 )-->
<!--		) and b_user.status=1-->
<!--		<if test="type!=null and  type=='1'.toString()">-->
<!--			and b_user.is_health_counselor=1-->
<!--		</if>-->
<!--		<if test="type!=null and type=='2'.toString()">-->
<!--			and b_user.is_insurance_counselor=1-->
<!--		</if>-->
<!--		ORDER BY-->
<!--		b_user.id ASC-->
<!--		LIMIT 1-->
<!--	</select>-->


	<select id="findFollowList" resultType="com.item.daoEx.model.UserEx">
             SELECT
        u.id, u.nick_name nickName, u.phone, u.head_img headImg
        FROM
            t_user_follow t left join b_user u on t.follow_id = u.id and t.type=1
        where t.status=1 and u.state=1 and t.user_id=#{userId} order by t.create_time desc

    </select>

	<select id="findFansList" resultType="com.item.daoEx.model.UserEx">
        SELECT
        u.id, u.nick_name nickName, u.phone, u.head_img headImg
        FROM
        t_user_follow t left join b_user u on t.user_id = u.id
        where t.status=1 and u.state=1 and t.follow_id=#{userId}  and t.type=1 order by t.create_time desc

    </select>


	<update id="updatePokeAmount">
        update b_user set poke_amount = (poke_amount + #{amount}) where id = #{id}
    </update>

	<select id="getByInviteCode" resultType="com.item.dao.model.User">
        SELECT  * from b_user where invite_code =#{inviteCode}
    </select>

	<update id="reSumPokeAmount">
        update b_user t set t.poke_amount =(SELECT ifnull(sum(amount_new),0) from b_user_poke_amount_log where user_id=t.id ) where t.id=#{id} and t.account_type=0
    </update>

	<select id="recommendList" resultType="com.item.daoEx.model.UserEx">
		select  a.* from (SELECT
		*
		FROM
		b_user u
		WHERE
		u.state=1
		<if test="userId!=null">
			and u.id not in (select follow_id from t_user_follow where user_id=#{userId}) and type=1 and u.id!=#{userId}
		</if>
		ORDER BY u.fans_count desc limit 200) a order by RAND()
		<if test="limit!=null">
			limit #{limit}
		</if>
	</select>

	<update id="updateUserCount">
		update b_user t set
		<if test="type!=null and type==1">
			t.article_count = (SELECT count(1) from t_article where user_id =t.id and type=1 and status!=0)
		</if>
		<if test="type!=null and type==2">
			t.follow_count = (SELECT count(1) from t_user_follow where user_id =t.id and type=1 and status=1 )
		</if>
		<if test="type!=null and type==3">
			t.fans_count = (SELECT count(1) from t_user_follow where follow_id =t.id and type=1 and status=1)
		</if>
		<if test="type!=null and type==4">
			t.order_count = (SELECT count(1) from p_order where user_id =t.id and status=4)
		</if>
		where t.id=#{id}
	</update>

	<update id="addIntegral">
        update b_user set integral = ifnull(integral,0) +#{integral} where id = #{id}
    </update>

	<update id="reSumBalance">
        update b_user set balance = (select ifnull(sum(amount_new),0) from p_user_amount_log where user_id = #{userId}) where id = #{userId}
    </update>

	<update id="saveBalance">
         update b_user set balance = ifnull(balance,0) +#{amount} where id = #{userId}
    </update>

	<select id="getCnt" resultType="java.lang.Integer">
		select count(1) from t_user_follow where status=1 and type=1
		<if test="userId!=null">
			and user_id = #{userId}
		</if>
		<if test="followId!=null">
			and follow_id = #{followId}
		</if>
	</select>

</mapper>